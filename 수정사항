format.log의 형식을 참조하여 output_udp_data.log을 생성하는 generate_udp_data.py을 생성한다. 
1. 생성 foramt은 format.log 형식을 참조한다.
    각 필드의 정보는 다음과 같다. 
    생성일자, 시간, IP정보, Port정보, Description정보, Message, MCP, Vehicle, State, Product, Error Code, Comm State, Current Address, Distance, Next Address, Run Cycle, Run Cycle Interal, Carrier, Destination Address, E/M State,
    GroupID, Return Origin Port, Return Priority, Job Detail, Move Distance

2. 생성 규칙
   여기서 고정된 값은 config.py에 저장하고 읽어온다. 
   a. 생성일자: 시스템상의 일자를 가져온다.
   b. 시간: 100~300ms 사이에 랜덤한 값으로 증가한다. 
   c. IP정보: '10.10.10.1'로 공통값을 갖는다.
   d. Port정보: '3600' 동일 값을 갖는다.
   e. Description정보: 'DigitalTwin' 값을 갖는다.
   f. Message정보: '2'을 갖는다.
   g. MCP: 'OHT' 값을 갖는다. 
   h. Vehicle: 'V00001' 을 갖는다.   
   i. State: '1'값을 갖는다.
   j. Product: '0'을 갖는다.
   k. Error Code: '0000'을 갖는다.
   l. Comm State: '1'을 갖는다.
   m. Current Address: 3번의 규칙을 따른다.
   n. Distance: '0'의 값을 갖는다.
   o. Next Address: 3번의 규칙을 따른다.
   p. Run Cycle: '2'을 갖는다.
   q. Run Cycle Interval: '1'을 갖는다.
   r. Carrier: 'AAAA0000'을 갖는다.
   s. Destination Address: 3번의 규칙을 따른다.
   t. E/M State: '00000000'을 갖는다. 
   u. GroupID: '0000'을 갖는다. 
   v. Return Origin Port: 값 없음
   w. Return Priority: '0' 값을 갖는다.
   x. Job Detail: '101' 값을 갖는다.
   y. Move Distance: '0' 값을 갖는다. 

3. Output.json파일에서 addresses, lines, stations 정보를 읽는다. 
   Current Address, Next Address, Destination Address는 output.json의 addresses중 하나의 정보를 갖는다. 
   Current Address, Destination Address는 config.py에서 입력받는다.
   Next Address는 Destination Address까지 가기 위한, Current Address에서 lines로 연결된 다음 Address 정보를 갖는다. 

4. Next Address와 Destination Address가 같아질때 까지, 2와 3을 반복한다.
결과를 output_udp_data.log에 저장한다. 





format.json의 stations키 형식을 참조하여 stations 좌표를 생성하는 addStation_IntraBay.py 코드 작성한다.
생성규칙은 다음과 같다. 
1. input.json에서 IntraBay의 정보를 pandas로 읽는다.
   IntraBay의 좌표는 3차원 좌표의 x,y좌표로 시작점과 끝점을 나타낸다. 
   Z6022 key값을 가지면, (x,y,6022.0), Z4822 key값을 가지면, (x,y,4822.0) 형태로 변환하여 읽는다. 
   모든 시작점과 끝점을 기준으로 y값을 100 간격으로 나누는 좌표의 시작점과 끝점을, station_boundary에 저장한다. 
   만약 station_boundary < DEVICES면, 에러 메세지를 출력하고 종료한다. 
2. station_boundary에 대해서 랜덤하게 DEVICES 수 만큼 선택하고, 선택된 station_boundary에 대해서 시작점과 끝점내에 stations 3개의 좌표를 생성한다.
   (생성되는 좌표는 Y값만 20의 간격을 갖고, station_boundary의 중앙에 위치한다.) 
   format.json을 참조하고 구체적인 stations 생성 규칙은 다음과 같다. 
  2-1. "id"는 300003부터 하나씩 증가하며 생성한다. 
  2-2. "name"은 ("Station" 문자열) + ("id"의 뒤 5자리)가 들어간다.
  2-3. "type" 값은 "1"을 갖는다. 
  2-4. "port"는 ("DEVICE") + (숫자("id"의 뒤 5자리) / 3 + 1) +("_") + (숫자("id"의 뒤 5자리) % 3 + 1 )의 형태를 갖는다.
  2-5. "pos"의 'x', 'z'는 동일한 값을 가지고, 'y'만 20 간격을 갖는다. 
3. 생성된 stations 좌표 정보는 format.json 형식을 참조하여, 기존 ouput.json에 추가 한다. 

#Station 생성
format.json의 stations키 형식을 참조하여 stations 좌표를 생성하는 make_stations.py 코드 작성한다.
생성규칙은 다음과 같다. 
1. output.json에서 addresses, lines의 정보를 pandas로 읽는다.
   3차원 좌표에서 y값만 80이상 변하는 직선에서 연속된 line 2개를 겹치지 않도록 랜덤하게 DEVICES(config.py에서 정의)=100개 선택한다.
   DEVICES 개를 선택하지 못하면 error를 출력하고 종료한다. 
2. 선택된 line 2개의 시작점과 끝점을 기준으로, 내부에 stations 3개의 좌표를 (생성된 좌표는 Y값만 20의 간격을 갖는다) 
   format.json을 참조하고 구체적인 stations 생성 규칙은 다음과 같다. 
  2-1. "id"는 300003부터 하나씩 증가하며 생성한다. 
  2-2. "name"은 ("Station" 문자열) + ("id"의 뒤 5자리)가 들어간다.
  2-3. "type" 값은 "1"을 갖는다. 
  2-4. "port"는 ("DEVICE") + (숫자("id"의 뒤 5자리) / 3 + 1) +("_") + (숫자("id"의 뒤 5자리) % 3 + 1 )의 형태를 갖는다.
  2-5. "pos"의 'x', 'z'는 동일한 값을 가지고, 'y'만 20 간격을 갖는다. 
3. 생성된 stations 좌표 정보는 format.json 형식을 참조하여, 기존 ouput.json에 추가 한다. 


#Layout 생성 체계화, Spring으로....
스파인: 팹의 중앙 물류 경로, 인터-베이 운송, 양방향 레일.
로컬 루프: 베이 내 단방향/양방향 레일, 인트라-베이 운송.
크로스오버: 스파인-로컬 루프, 층 간 연결 단축, 혼잡 완화.
상호작용: 스파인은 로컬 루프를 연결하고, 크로스오버는 경로 유연성과 층 간 이동을 지원하여 전체 물류 효율성을 높임.


